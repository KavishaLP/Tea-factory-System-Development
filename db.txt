CREATE TABLE farmeraccounts (
    id INT(11) NOT NULL AUTO_INCREMENT,
    userId VARCHAR(100) NOT NULL UNIQUE,
    userName VARCHAR(100) NOT NULL,
    firstName VARCHAR(100) NOT NULL,
    lastName VARCHAR(100) NOT NULL,
    address VARCHAR(255) NOT NULL,
    mobile1 VARCHAR(15) NOT NULL,
    mobile2 VARCHAR(15),
    gmail VARCHAR(150),
    password VARCHAR(255) NOT NULL,
    RESET_CODE VARCHAR(6),
    RESET_EXPIRY DATETIME,
    createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    tea_delivery_method ENUM('farmer_vehicle','factory_vehicle') NOT NULL,
    PRIMARY KEY (id)
);


CREATE TABLE farmer_payments (
  id INT AUTO_INCREMENT PRIMARY KEY,
  userId INT,  -- Changed to INT to match users' id
  paymentPerKilo DECIMAL(10, 2) NOT NULL,
  finalTeaKilos DECIMAL(10, 2) NOT NULL,
  paymentForFinalTeaKilos DECIMAL(10, 2) NOT NULL,
  additionalPayments DECIMAL(10, 2) DEFAULT 0,
  transport DECIMAL(10, 2) DEFAULT 0,
  directPayments DECIMAL(10, 2) DEFAULT 0,
  finalAmount DECIMAL(10, 2) NOT NULL,
  advances DECIMAL(10, 2) DEFAULT 0,
  teaPackets DECIMAL(10, 2) DEFAULT 0,
  fertilizer DECIMAL(10, 2) DEFAULT 0,
  finalPayment DECIMAL(10, 2) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  status ENUM('Pending', 'Approved') NOT NULL DEFAULT 'Pending'
  FOREIGN KEY (userId) REFERENCES farmeraccounts(userId) ON DELETE CASCADE
);

CREATE TABLE employeeaccounts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    userId VARCHAR(255) UNIQUE NOT NULL,
    firstName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    mobile1 VARCHAR(20) NOT NULL,
    mobile2 VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE employee_payments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    userId VARCHAR(255) NOT NULL,
    salaryAmount DECIMAL(10,2) NOT NULL,
    additionalPayments DECIMAL(10,2) DEFAULT 0,
    deductions DECIMAL(10,2) DEFAULT 0,
    finalPayment DECIMAL(10,2) NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE advance_payment (
    advn_id INT AUTO_INCREMENT PRIMARY KEY,
    userId VARCHAR(100) NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    date DATE NOT NULL,
    action ENUM('Pending', 'Approved', 'Rejected') NOT NULL DEFAULT 'Pending',
    FOREIGN KEY (userId) REFERENCES farmeraccounts(userId) ON DELETE CASCADE
);

CREATE TABLE tea_sack_updates (
    id INT AUTO_INCREMENT PRIMARY KEY,
    userId VARCHAR(100) NOT NULL,
    date DATE NOT NULL,
    tea_sack_weight DECIMAL(10,2) NOT NULL,
    deduction_water DECIMAL(10,2) DEFAULT 0.00,
    deduction_damage_tea DECIMAL(10,2) DEFAULT 0.00,
    deduction_sack_weight DECIMAL(10,2) DEFAULT 0.00,
    deduction_sharped_tea DECIMAL(10,2) DEFAULT 0.00,
    deduction_other DECIMAL(10,2) DEFAULT 0.00,
    final_tea_sack_weight DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (userId) REFERENCES farmeraccounts(userId) ON DELETE CASCADE
);

CREATE TABLE fertilizer_requests (
    request_id INT AUTO_INCREMENT PRIMARY KEY, -- Unique ID for each request
    userId VARCHAR(100) NOT NULL, -- ID of the user making the request
    fertilizerType VARCHAR(50) NOT NULL, -- Type of fertilizer (e.g., Urea, Compost)
    packetType VARCHAR(50) NOT NULL, -- Packet size (e.g., 5kg, 10kg)
    amount INT NOT NULL, -- Number of packets requested
    requestDate DATE NOT NULL, -- Date of the request
    status ENUM('Pending', 'Approved', 'Rejected') NOT NULL DEFAULT 'Pending', -- Status of the request
    paymentoption ENUM('cash', 'deductpayment');
    FOREIGN KEY (userId) REFERENCES farmeraccounts(userId) ON DELETE CASCADE -- Link to farmeraccounts table
);

CREATE TABLE tea_packet_requests (
    request_id INT AUTO_INCREMENT PRIMARY KEY, -- Unique ID for each request
    userId VARCHAR(100) NOT NULL, -- ID of the user making the request
    teaPacketType VARCHAR(50) NOT NULL, -- Type of fertilizer (e.g., Urea, Compost)
    teaPacketSize VARCHAR(50) NOT NULL, -- Packet size (e.g., 5kg, 10kg)
    amount INT NOT NULL, -- Number of packets requested
    requestDate DATE NOT NULL, -- Date of the request
    status ENUM('Pending', 'Approved', 'Rejected') NOT NULL DEFAULT 'Pending', -- Status of the request
    paymentoption ENUM('cash', 'deductpayment');
    FOREIGN KEY (userId) REFERENCES farmeraccounts(userId) ON DELETE CASCADE -- Link to farmeraccounts table
);

//--------------------------------------------------------------------------------------------------------

CREATE TABLE fertilizer_prices (
    fertilizer_veriance_id  INT AUTO_INCREMENT PRIMARY KEY, -- Unique ID for each price record
    fertilizerType VARCHAR(50) NOT NULL, -- Type of fertilizer (e.g., Urea, Compost)
    packetType VARCHAR(50) NOT NULL, -- Packet size (e.g., 5kg, 10kg)
    price DECIMAL(10,2) NOT NULL -- Price of each packet
);

CREATE TABLE fertilizer_requests (
    request_id INT AUTO_INCREMENT PRIMARY KEY, -- Unique ID for each request
    userId VARCHAR(100) NOT NULL, -- ID of the user making the request
    fertilizer_veriance_id INT NOT NULL, -- Foreign key to fertilizer_prices table
    amount INT NOT NULL, -- Number of packets requested
    requestDate DATE NOT NULL, -- Date of the request
    status ENUM('Pending', 'Approved', 'Rejected') NOT NULL DEFAULT 'Pending', -- Status of the request
    paymentoption ENUM('cash', 'deductpayment'), -- Payment option
    FOREIGN KEY (userId) REFERENCES farmeraccounts(userId) ON DELETE CASCADE, -- Link to farmeraccounts table
    FOREIGN KEY (fertilizer_veriance_id) REFERENCES fertilizer_prices(fertilizer_veriance_id) ON DELETE CASCADE -- Link to fertilizer_prices table
);

CREATE TABLE tea_inventory (
  id INT AUTO_INCREMENT PRIMARY KEY,
  tea_type VARCHAR(50) NOT NULL,
  packet_size VARCHAR(10) NOT NULL,
  packet_count INT NOT NULL,
  last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY (tea_type, packet_size)
);

CREATE TABLE tea_price_per_kilo (
  id INT AUTO_INCREMENT PRIMARY KEY,
  price DECIMAL(10, 2) NOT NULL,
  month_year VARCHAR(7) NOT NULL, -- Format: YYYY-MM (e.g., 2025-04)
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE (month_year) -- Only one price entry per month
);

CREATE TABLE notifications (
  id INT AUTO_INCREMENT PRIMARY KEY,
  receiver_id INT NOT NULL,
  receiver_type ENUM('admin', 'manager', 'farmer') NOT NULL,
  title VARCHAR(255) NOT NULL,
  message TEXT NOT NULL,
  is_read BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  INDEX (receiver_id, receiver_type),
  INDEX (is_read)
);

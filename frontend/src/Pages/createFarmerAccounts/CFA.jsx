import React, { useState, useEffect } from "react";
import axios from 'axios';
import "./CFA.css";

const CreateFarmerAccount = () => {
  const [activeTab, setActiveTab] = useState("createAccount");
  const [formData, setFormData] = useState({
    userId: "",
    userName: "",
    firstName: "",
    lastName: "",
    address: "",
    mobile1: "",
    mobile2: "",
    gmail: "",
    password: "",
    reenterPassword: "",
  });
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [farmerAccounts, setFarmerAccounts] = useState([]);
  const [filteredAccounts, setFilteredAccounts] = useState([]);
  const [historyLoading, setHistoryLoading] = useState(false);
  const [fieldErrors, setFieldErrors] = useState({
    userId: "",
    mobile1: "",
    mobile2: "",
    gmail: ""
  });
  const [searchTerm, setSearchTerm] = useState("");
  const [nextAvailableId, setNextAvailableId] = useState("");
  const [isAutoGenerated, setIsAutoGenerated] = useState(true);

  // Fetch farmer accounts and determine next available ID
  useEffect(() => {
    const fetchFarmerAccounts = async () => {
      setHistoryLoading(true);
      setError("");
      try {
        const response = await axios.get(
          "http://localhost:8081/api/manager/get-farmer-accounts",
          { withCredentials: true }
        );
        if (response.data.status === "success") {
          const accounts = response.data.data;
          setFarmerAccounts(accounts);
          setFilteredAccounts(accounts);
          
          // Generate next ID based on existing accounts
          generateNextUserId(accounts);
        } else {
          setError("Failed to fetch farmer accounts. Please try again later.");
        }
      } catch (error) {
        console.error("Error fetching farmer accounts:", error);
        setError("An error occurred while fetching farmer accounts. Please check your connection and try again.");
        // Set a default ID pattern if we can't fetch
        setNextAvailableId("F" + String(new Date().getFullYear()).slice(2) + "001");
      } finally {
        setHistoryLoading(false);
      }
    };

    fetchFarmerAccounts();
  }, [activeTab]);

  // Improved function to generate next available user ID
  const generateNextUserId = (accounts) => {
    try {
      // Format: F + YY + sequential number (e.g., F23001, F23002)
      const currentYear = String(new Date().getFullYear()).slice(2); // Get last 2 digits of year
      const yearPrefix = "F" + currentYear;
      
      // Find highest existing ID with the current year prefix
      let maxNumber = 0;
      
      if (accounts && accounts.length > 0) {
        accounts.forEach(account => {
          if (account.userId && account.userId.startsWith(yearPrefix)) {
            // Extract the numeric part after the year prefix (e.g., "001" from "F23001")
            const numericPart = account.userId.substring(3);
            if (/^\d+$/.test(numericPart)) { // Ensure it contains only digits
              const num = parseInt(numericPart, 10);
              if (!isNaN(num) && num > maxNumber) {
                maxNumber = num;
              }
            }
          }
        });
      }
      
      // Create next ID by incrementing the highest existing number
      const nextNumber = maxNumber + 1;
      const paddedNumber = String(nextNumber).padStart(3, '0');
      const newId = yearPrefix + paddedNumber;
      
      console.log("Generated new ID:", newId, "Based on max number:", maxNumber);
      
      // Set the next ID and update form data
      setNextAvailableId(newId);
      setFormData(prevData => ({
        ...prevData,
        userId: newId,
        userName: `farmer_${newId}`
      }));
      
      // Ensure ID is marked as auto-generated
      setIsAutoGenerated(true);
    } catch (error) {
      console.error("Error generating next user ID:", error);
      // Fallback to a default pattern with random suffix for uniqueness
      const defaultId = "F" + String(new Date().getFullYear()).slice(2) + 
                        String(Math.floor(Math.random() * 900) + 100); // Random 3-digit number
      console.log("Using fallback ID:", defaultId);
      
      setNextAvailableId(defaultId);
      setFormData(prevData => ({
        ...prevData,
        userId: defaultId,
        userName: `farmer_${defaultId}`
      }));
      
      // Even fallback IDs are considered auto-generated initially
      setIsAutoGenerated(true);
    }
  };

  // Apply search filter whenever searchTerm or farmerAccounts changes
  useEffect(() => {
    if (searchTerm.trim() === "") {
      setFilteredAccounts(farmerAccounts);
    } else {
      const term = searchTerm.toLowerCase();
      const filtered = farmerAccounts.filter(farmer => 
        Object.entries(farmer).some(([key, value]) => {
          // Only search in these specific fields
          const searchableFields = [
            "userId", 
            "userName", 
            "firstName", 
            "lastName", 
            "address", 
            "mobile1", 
            "mobile2", 
            "gmail"
          ];
          
          if (searchableFields.includes(key) && typeof value === "string") {
            return value.toLowerCase().includes(term);
          }
          return false;
        })
      );
      setFilteredAccounts(filtered);
    }
  }, [searchTerm, farmerAccounts]);

  // Validate mobile number format
  const validateMobile = (number) => {
    const mobileRegex = /^[0-9]{10}$/;
    return mobileRegex.test(number);
  };

  // Enhanced email validation
  const validateEmail = (email) => {
    // Check if it's empty first
    if (!email) return false;
    
    // Basic email format validation
    const basicEmailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!basicEmailRegex.test(email)) return false;
    
    // Check if it's specifically a Gmail address
    const isGmail = email.toLowerCase().endsWith('@gmail.com');
    
    return isGmail;
  };

  // Function to handle form field changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    
    // Special handling for userId field
    if (name === "userId") {
      // Mark as manually edited if the value differs from auto-generated ID
      if (value !== nextAvailableId) {
        setIsAutoGenerated(false);
      }
      
      // Always update the userName to match the userId
      setFormData(prevData => ({
        ...prevData,
        [name]: value,
        userName: `farmer_${value}`
      }));
    } else {
      // Normal field update for other fields
      setFormData(prevData => ({
        ...prevData,
        [name]: value
      }));
    }

    // Validate fields as user types
    if (name === "mobile1" || name === "mobile2") {
      if (value && !validateMobile(value)) {
        setFieldErrors({
          ...fieldErrors,
          [name]: "Please enter a valid 10-digit mobile number"
        });
      } else {
        setFieldErrors({
          ...fieldErrors,
          [name]: ""
        });
      }
    }

    if (name === "gmail") {
      if (!value) {
        setFieldErrors({
          ...fieldErrors,
          [name]: "Email address is required"
        });
      } else if (!validateEmail(value)) {
        // Check if it's not even a valid email format
        const basicEmailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        if (!basicEmailRegex.test(value)) {
          setFieldErrors({
            ...fieldErrors,
            [name]: "Please enter a valid email address format"
          });
        } else {
          // It's a valid email but not Gmail
          setFieldErrors({
            ...fieldErrors,
            [name]: "Please enter a valid Gmail address (ending with @gmail.com)"
          });
        }
      } else {
        setFieldErrors({
          ...fieldErrors,
          [name]: ""
        });
      }
    }
  };

  // Function to regenerate ID
  const handleRegenerateId = () => {
    // Generate a fresh ID based on current accounts
    generateNextUserId(farmerAccounts);
    
    // This will be marked as auto-generated in the generateNextUserId function
  };

  // Handle form submission with comprehensive validation
  const handleSubmit = (e) => {
    e.preventDefault();

    // Clear previous errors
    setError("");
    let hasErrors = false;
    const newFieldErrors = {...fieldErrors};

    // Validate required fields
    if (!formData.userId || !formData.firstName || !formData.lastName || !formData.password) {
      setError("Please fill in all required fields");
      return;
    }

    // Validate mobile numbers
    if (!validateMobile(formData.mobile1)) {
      newFieldErrors.mobile1 = "Please enter a valid 10-digit mobile number";
      hasErrors = true;
    }

    if (formData.mobile2 && !validateMobile(formData.mobile2)) {
      newFieldErrors.mobile2 = "Please enter a valid 10-digit mobile number";
      hasErrors = true;
    }

    // Validate email
    if (!validateEmail(formData.gmail)) {
      newFieldErrors.gmail = "Please enter a valid Gmail address";
      hasErrors = true;
    }

    // Validate password match
    if (formData.password !== formData.reenterPassword) {
      setError("Passwords do not match");
      return;
    }

    setFieldErrors(newFieldErrors);

    if (hasErrors) {
      return;
    }

    setError("");
    setIsLoading(true);

    // Send data to backend API
    axios
      .post('http://localhost:8081/api/manager/add-farmer', formData)
      .then((response) => {
        console.log('Farmer account created:', response.data);
        alert("Account created successfully!");
        
        // Reset form and generate new ID for next account
        setFormData({
          userId: "",
          userName: "",
          firstName: "",
          lastName: "",
          address: "",
          mobile1: "",
          mobile2: "",
          gmail: "",
          password: "",
          reenterPassword: "",
        });
        
        // Get updated accounts and generate new ID
        axios.get("http://localhost:8081/api/manager/get-farmer-accounts", { 
          withCredentials: true 
        }).then(res => {
          if (res.data.status === "success") {
            setFarmerAccounts(res.data.data);
            setFilteredAccounts(res.data.data);
            generateNextUserId(res.data.data);
          }
        });
        
        setIsAutoGenerated(true);
      })
      .catch((error) => {
        console.error('Error creating farmer account:', error);
        setError(error.response?.data?.message || 'An error occurred while creating the account. Please try again.');
      })
      .finally(() => setIsLoading(false));
  };

  return (
    <div className="cfa-content">
      <h2>Farmer Account Management</h2>
      <div className="cfa-grid">
        {/* Tabs */}
        <div className="tabs-container">
          <button
            className={`tab-button ${activeTab === "createAccount" ? "active" : ""}`}
            onClick={() => setActiveTab("createAccount")}
          >
            Create Farmer Account
          </button>
          <button
            className={`tab-button ${activeTab === "viewAccounts" ? "active" : ""}`}
            onClick={() => setActiveTab("viewAccounts")}
          >
            View Farmer Accounts
          </button>
        </div>

        {/* Create Farmer Account Form */}
        {activeTab === "createAccount" && (
          <form onSubmit={handleSubmit}>
            <div className="input-group">
              <label>User ID</label>
              <div className="id-input-container">
                <input
                  type="text"
                  name="userId"
                  value={formData.userId}
                  onChange={handleChange}
                  required
                  placeholder="Auto-generated ID"
                  maxLength="20"
                  className={isAutoGenerated ? "auto-generated" : "manually-edited"}
                />
                <button 
                  type="button" 
                  className="regenerate-btn" 
                  onClick={handleRegenerateId}
                  title="Regenerate ID"
                >
                  ↻
                </button>
              </div>
              <span className="id-status-note">
                {isAutoGenerated 
                  ? "Auto-generated ID (can be modified if needed)" 
                  : "Manually edited ID"}
              </span>
            </div>

            <div className="input-group">
              <label>User Name</label>
              <input
                type="text"
                name="userName"
                value={formData.userName}
                readOnly
                placeholder="Auto-generated based on User ID"
                className="auto-generated"
              />
              <span className="id-info-note">Username is automatically derived from User ID</span>
            </div>

            {/* First Name and Last Name in one row with equal sizes */}
            <div className="input-group two-column">
              <div className="input-field">
                <label>First Name</label>
                <input
                  type="text"
                  name="firstName"
                  value={formData.firstName}
                  onChange={handleChange}
                  required
                  placeholder="Enter first name"
                  maxLength="30"
                />
              </div>
              <div className="input-field">
                <label>Last Name</label>
                <input
                  type="text"
                  name="lastName"
                  value={formData.lastName}
                  onChange={handleChange}
                  required
                  placeholder="Enter last name"
                  maxLength="30"
                />
              </div>
            </div>

            <div className="input-group full-row">
              <label>Address</label>
              <input
                type="text"
                name="address"
                value={formData.address}
                onChange={handleChange}
                required
                placeholder="Enter address"
              />
            </div>

            <div className="input-group">
              <label>Mobile Number 1</label>
              <input
                type="tel"
                name="mobile1"
                value={formData.mobile1}
                onChange={handleChange}
                required
                placeholder="Enter 10-digit mobile number"
                maxLength="10"
              />
              {fieldErrors.mobile1 && <span className="field-error">{fieldErrors.mobile1}</span>}
            </div>

            <div className="input-group">
              <label>Mobile Number 2 (Optional)</label>
              <input
                type="tel"
                name="mobile2"
                value={formData.mobile2}
                onChange={handleChange}
                placeholder="Enter 10-digit mobile number"
                maxLength="10"
              />
              {fieldErrors.mobile2 && <span className="field-error">{fieldErrors.mobile2}</span>}
            </div>

            <div className="input-group full-row">
              <label>Gmail</label>
              <input
                type="email"
                name="gmail"
                value={formData.gmail}
                onChange={handleChange}
                required
                placeholder="Enter valid email address"
                maxLength="50"
              />
              {fieldErrors.gmail && <span className="field-error">{fieldErrors.gmail}</span>}
            </div>

            <div className="input-group">
              <label>Password</label>
              <input
                type="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                required
                placeholder="Enter password"
              />
            </div>

            <div className="input-group">
              <label>Re-enter Password</label>
              <input
                type="password"
                name="reenterPassword"
                value={formData.reenterPassword}
                onChange={handleChange}
                required
                placeholder="Re-enter password"
              />
            </div>

            {error && <p className="error">{error}</p>}

            <button type="submit" disabled={isLoading} className={isLoading ? "loading" : ""}>
              {isLoading ? "Creating Account..." : "Create Account"}
            </button>
          </form>
        )}

        {/* View Farmer Accounts Table */}
        {activeTab === "viewAccounts" && (
          <div className="farmer-accounts-table">
            <div className="search-container">
              <input
                type="text"
                placeholder="Search farmer accounts..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
            </div>
            
            {historyLoading ? (
              <p>Loading...</p>
            ) : error ? (
              <p className="error">{error}</p>
            ) : filteredAccounts.length > 0 ? (
              <table>
                <thead>
                  <tr>
                    <th>User ID</th>
                    <th>User Name</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Address</th>
                    <th>Mobile 1</th>
                    <th>Mobile 2</th>
                    <th>Gmail</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredAccounts.map((farmer, index) => (
                    <tr key={index}>
                      <td>{farmer.userId}</td>
                      <td>{farmer.userName}</td>
                      <td>{farmer.firstName}</td>
                      <td>{farmer.lastName}</td>
                      <td>{farmer.address}</td>
                      <td>{farmer.mobile1}</td>
                      <td>{farmer.mobile2 || "-"}</td>
                      <td>{farmer.gmail}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : (
              <p>No farmer accounts found{searchTerm ? " matching your search" : ""}.</p>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default CreateFarmerAccount;